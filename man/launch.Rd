% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dockertest.R
\name{launch}
\alias{launch}
\title{Launch a docker container}
\usage{
launch(type = "test", args = NULL, interactive = TRUE, dry_run = FALSE,
  mount_volume = NULL, machine = NULL, link = NULL, name = NULL,
  filename = NULL)
}
\arguments{
\item{type}{Type of container to run (as for \code{link{build}}.
"run" and "production" (last one only for packages).}

\item{args}{Additional arguments to pass through to docker.  As
it's not totally transparent what arguments dockertest will
inject, this should really be (optionally) things like the name
of the program to run within a container.}

\item{interactive}{Should the container be interactive and
allocate a pseudo-tty?  The default is \code{TRUE} because it is
possible to lock your console hard if you set this to
\code{FALSE} when input is needed.}

\item{dry_run}{Rather than actually run the command, return the
command string suitable for running in a separate script.}

\item{mount_volume}{Should a volume be mounted?  This generates
the appropriate \emph{absolute} path name for a mapping.  By
default this is \code{TRUE} if the image requires it.  If the
image is "inplace", the the mount will map the project root to
the docker working directory.  If not then it will mount the
`self` directory (a clean clone) into the place where that is
re-cloned into the container (therefore isolated from the
machine).  This behaviour may change.}

\item{machine}{Name of docker machine to use}

\item{link}{Vector of links (e.g. \code{mycontainer:redis})}

\item{name}{As an alternative to \code{type}, a full name can be
given here, which dockertest will attempt to map onto a type.}

\item{filename}{Optional filename used when \code{name} is given;
only needed if \code{dockertest.yml} is hard to find.}
}
\description{
Launches a docker container that was created by dockertest.
}
\details{
Note that this is the worst sort of function; the output totally
changes depending on what mode it is in.  It will either run a
function or it will print what it \emph{would} run so that that
command can be used elsewhere.
}

